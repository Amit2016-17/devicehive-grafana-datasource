{"version":3,"sources":["../src/datasource.js"],"names":["DeviceHiveClient","_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","jsonData","dhClientPromise","q","authType","authenticate","auth","serverURL","login","password","then","dhClient","token","options","newTargets","targets","forEach","execResults","_regex","exec","target","dataPath","push","slice","replace","RegExp","_index","current","value","scale","refId","queryData","deviceId","from","range","_d","to","result","testDatasource","Promise","resolve","status","message","title","catch","error"],"mappings":"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","file":"datasource.js","sourcesContent":["import DeviceHiveClient from './dh';\nimport _ from \"lodash\";\n\nexport class GenericDatasource {\n  /**\n   * Creates an instance of GenericDatasource.\n   * @param {Object} instanceSettings \n   * @param {any} $q \n   * @memberof GenericDatasource\n   */\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.jsonData = instanceSettings.jsonData;\n    this.dhClientPromise = null;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    \n    this.q = $q;\n    if (instanceSettings.jsonData){\n      if (instanceSettings.jsonData.authType === `Login/Password` || instanceSettings.jsonData.authType === `Token`){\n        this.authenticate(this.jsonData.authType, this.jsonData.auth, this.jsonData.serverURL);\n      }\n    }\n  }\n\n  /**\n   * Authenticates user\n   * \n   * @param {String} type \n   * @param {Object} auth \n   * @param {String} url \n   * @returns \n   * @memberof GenericDatasource\n   */\n  authenticate(type, auth, url){\n    if (type === `Login/Password`){\n      return this.dhClientPromise = new DeviceHiveClient({\n        login : auth.login,\n        password : auth.password,\n        serverURL : url\n      })\n      .then(dhClient => {\n        this.dhClient = dhClient;\n        return dhClient;\n      });\n    } else if (type === `Token`){\n      return this.dhClientPromise = new DeviceHiveClient({\n        token : auth.token,\n        serverURL : url\n      })\n      .then(dhClient => {\n        this.dhClient = dhClient;\n        return dhClient;\n      });\n    }\n  }\n\n  /**\n   * Function used by Grafana to query data\n   * \n   * @param {Object} options \n   * @returns \n   * @memberof GenericDatasource\n   */\n  query(options) {\n    const newTargets = [];\n    options.targets.forEach(target => {\n      const execResults = this.templateSrv._regex.exec(target.dataPath);\n      newTargets.push({\n        dataPath : target.dataPath.slice().replace(new RegExp(\"\\\\\" + `${execResults[0]}`), this.templateSrv._index[execResults[1]].current.value),\n        scale : target.scale,\n        refId : target.refId,\n        type : target.type\n      });\n    })\n    if (this.dhClient){\n      return this.dhClient\n        .queryData(newTargets, this.jsonData.deviceId, { from : options.range.from._d, to : options.range.to._d })\n        .then(result => {\n          return result;\n        });\n    } else {\n      return this.authenticate(this.jsonData.authType, this.jsonData.auth, this.jsonData.serverURL)\n      .then(dhClient => dhClient.testDatasource())\n      .then(() => {\n        return this.dhClient.queryData(newTargets, this.jsonData.deviceId, { from : options.range.from._d, to : options.range.to._d })\n      })\n      .then(result => {\n        return result;\n      });\n    }\n  }\n\n  /**\n   * Function used by Grafana to test datasource\n   * \n   * @returns \n   * @memberof GenericDatasource\n   */\n  testDatasource() {\n    return this.dhClientPromise\n      .then(dhClient => dhClient.testDatasource())\n      .then(() => Promise.resolve({ status : `success`, message : `Data source is working`, title : `Success` }))\n      .catch((message) => Promise.resolve({ status : `error`, message : message.error, title : `Error` }));\n  }\n}\n"]}