{"version":3,"sources":["../../src/ConverterManager.js"],"names":["ConverterManager","me","converters","Map","set","arguments","type","defaultValue","exec","a1","value","convertValueOptions","_getConvertOptions","convertTypeOptions","Object","keys","options","a2","a3","_execConvert","result","forEach","key","push","assign","name","Array","from","converterName","get","getConverterObject","reduce","obj","argument","index","args","has","converter","execFunc","bind","_castArgument","castedValue","Number","isNumber","isNaN","temperature","to","_convertTemperature"],"mappings":"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","file":"ConverterManager.js","sourcesContent":["import lodash from \"lodash\";\r\n\r\nclass ConverterManager {\r\n\r\n    constructor() {\r\n        const me = this;\r\n\r\n        me.converters = new Map();\r\n\r\n        me.converters.set(`offset`, {\r\n            arguments: [\r\n                { type: `number`, defaultValue: 0 }\r\n            ],\r\n            exec: (a1, value) => a1 + value\r\n        });\r\n\r\n        me.converters.set(`scale`, {\r\n            arguments: [\r\n                { type: `number`, defaultValue: 1 }\r\n            ],\r\n            exec: (a1, value) => a1 * value\r\n        });\r\n\r\n        const convertValueOptions = ConverterManager._getConvertOptions();\r\n        const convertTypeOptions = Object.keys(convertValueOptions);\r\n\r\n        me.converters.set(`convert`, {\r\n            arguments: [\r\n                { type: `option`, defaultValue: convertTypeOptions[0], options: convertTypeOptions },\r\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions },\r\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions }\r\n            ],\r\n            exec: (a1, a2, a3, value) => ConverterManager._execConvert(a1, a2, a3, value)\r\n        });\r\n    }\r\n\r\n    getConvertersMap() {\r\n        const me = this;\r\n\r\n        return me.converters;\r\n    }\r\n\r\n    getConvertersList() {\r\n        const me = this;\r\n        const result = [];\r\n\r\n        me.converters.forEach((value, key) => {\r\n            result.push(Object.assign({ name: key }, value));\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    getConvertersNameList() {\r\n        const me = this;\r\n\r\n        return Array.from(me.converters.keys());\r\n    }\r\n\r\n    getConverterObject(converterName) {\r\n        const me = this;\r\n\r\n        return me.converters.get(converterName);\r\n    }\r\n\r\n    getConverterDefaultValuesObject(converterName) {\r\n        const me = this;\r\n\r\n        return me.getConverterObject(converterName).arguments.reduce((obj, argument, index) => {\r\n            obj[index] = argument.defaultValue;\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n\r\n    convert(converterName, value, args) {\r\n        const me = this;\r\n        let result = value;\r\n\r\n        if (me.converters.has(converterName)) {\r\n            const converter = me.converters.get(converterName);\r\n            const exec = converter.arguments.reduce((execFunc, argument, index) =>\r\n                execFunc.bind(null, ConverterManager._castArgument(args[index], argument)), converter.exec);\r\n\r\n            result = exec(result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static _castArgument(value, argument) {\r\n        let result = argument.defaultValue;\r\n\r\n        switch(argument.type) {\r\n            case `number`:\r\n                const castedValue = Number(value);\r\n                result = lodash.isNumber(castedValue) && !lodash.isNaN(castedValue) ? castedValue : result;\r\n                break;\r\n            case `option`:\r\n            case `typedOption`:\r\n                result = value;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static _getConvertOptions () {\r\n        return {\r\n            temperature: [ 'C', 'F', 'K' ]\r\n        }\r\n    }\r\n\r\n    static _execConvert (type, from, to, value) {\r\n        let result = value;\r\n\r\n        switch (type) {\r\n            case 'temperature':\r\n                result = ConverterManager._convertTemperature(from, to, value);\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static _convertTemperature (from, to, value) {\r\n        let result = value;\r\n\r\n        switch (from + to) {\r\n            case 'CF':\r\n                result = (value * 9 / 5) + 32;\r\n                break;\r\n            case 'CK':\r\n                result = value + 273.15;\r\n                break;\r\n            case 'FC':\r\n                result = (value - 32) * 5 / 9;\r\n                break;\r\n            case 'FK':\r\n                result = (value + 459.67) * 5 / 9;\r\n                break;\r\n            case 'KC':\r\n                result = value - 273.15;\r\n                break;\r\n            case 'KF':\r\n                result = (value * 9 / 5) - 459.67;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default ConverterManager;"]}