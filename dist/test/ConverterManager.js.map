{"version":3,"sources":["../../src/ConverterManager.js"],"names":["ConverterManager","me","converters","Map","set","arguments","type","defaultValue","exec","a1","value","convertValueOptions","_getConvertOptions","convertTypeOptions","Object","keys","options","a2","a3","_execConvert","result","forEach","key","push","assign","name","Array","from","converterName","get","getConverterObject","reduce","obj","argument","index","args","has","converter","execFunc","bind","_castArgument","castedValue","Number","isNumber","isNaN","temperature","length","weight","volume","to","toUpperCase","_convertTemperature","_convertLength","_convertWeight","_convertVolume"],"mappings":"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","file":"ConverterManager.js","sourcesContent":["import lodash from \"lodash\";\n\n\nclass ConverterManager {\n\n    constructor() {\n        const me = this;\n\n        me.converters = new Map();\n\n        me.converters.set(`offset`, {\n            arguments: [\n                { type: `number`, defaultValue: 0 }\n            ],\n            exec: (a1, value) => a1 + value\n        });\n\n        me.converters.set(`scale`, {\n            arguments: [\n                { type: `number`, defaultValue: 1 }\n            ],\n            exec: (a1, value) => a1 * value\n        });\n\n        const convertValueOptions = ConverterManager._getConvertOptions();\n        const convertTypeOptions = Object.keys(convertValueOptions);\n\n        me.converters.set(`convert`, {\n            arguments: [\n                { type: `option`, defaultValue: convertTypeOptions[0], options: convertTypeOptions },\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions },\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions }\n            ],\n            exec: (a1, a2, a3, value) => ConverterManager._execConvert(a1, a2, a3, value)\n        });\n    }\n\n    getConvertersMap() {\n        const me = this;\n\n        return me.converters;\n    }\n\n    getConvertersList() {\n        const me = this;\n        const result = [];\n\n        me.converters.forEach((value, key) => {\n            result.push(Object.assign({ name: key }, value));\n        });\n\n        return result;\n    }\n\n    getConvertersNameList() {\n        const me = this;\n\n        return Array.from(me.converters.keys());\n    }\n\n    getConverterObject(converterName) {\n        const me = this;\n\n        return me.converters.get(converterName);\n    }\n\n    getConverterDefaultValuesObject(converterName) {\n        const me = this;\n\n        return me.getConverterObject(converterName).arguments.reduce((obj, argument, index) => {\n            obj[index] = argument.defaultValue;\n            return obj;\n        }, {});\n    }\n\n\n    convert(converterName, value, args) {\n        const me = this;\n        let result = value;\n\n        if (me.converters.has(converterName)) {\n            const converter = me.converters.get(converterName);\n            const exec = converter.arguments.reduce((execFunc, argument, index) =>\n                execFunc.bind(null, ConverterManager._castArgument(args[index], argument)), converter.exec);\n\n            result = exec(result);\n        }\n\n        return result;\n    }\n\n    static _castArgument(value, argument) {\n        let result = argument.defaultValue;\n\n        switch(argument.type) {\n            case `number`:\n                const castedValue = Number(value);\n                result = lodash.isNumber(castedValue) && !lodash.isNaN(castedValue) ? castedValue : result;\n                break;\n            case `option`:\n            case `typedOption`:\n                result = value;\n                break;\n        }\n\n        return result;\n    }\n\n    static _getConvertOptions () {\n        return {\n            temperature: [ 'C', 'F', 'K' ],\n            length: [ 'm', 'mi', 'yd', 'ft', 'in' ],\n            weight: [ 'kg', 'lb', 'oz' ],\n            volume: [ 'l', 'gal', 'pt' ]\n        }\n    }\n\n    static _execConvert (type, from, to, value) {\n        let result = value;\n\n        from = from.toUpperCase();\n        to = to.toUpperCase();\n\n        switch (type) {\n            case 'temperature':\n                result = ConverterManager._convertTemperature(from, to, value);\n                break;\n            case 'length':\n                result = ConverterManager._convertLength(from, to, value);\n                break;\n            case 'weight':\n                result = ConverterManager._convertWeight(from, to, value);\n                break;\n            case 'volume':\n                result = ConverterManager._convertVolume(from, to, value);\n                break;\n        }\n\n        return result;\n    }\n\n    static _convertTemperature (from, to, value) {\n        let result = value;\n\n        switch (from + to) {\n            case 'CF':\n                result = (value * 9 / 5) + 32;\n                break;\n            case 'CK':\n                result = value + 273.15;\n                break;\n            case 'FC':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'FK':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'KC':\n                result = value - 273.15;\n                break;\n            case 'KF':\n                result = (value * 9 / 5) - 459.67;\n                break;\n        }\n\n        return result;\n    }\n\n    //ength: [ 'm', 'mi', 'yd', 'ft', 'in' ],\n    static _convertLength (from, to, value) {\n        let result = value;\n\n        switch (from + to) {\n            case 'MMI':\n                result = (value * 9 / 5) + 32;\n                break;\n            case 'MYD':\n                result = value + 273.15;\n                break;\n            case 'MFT':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'MIN':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'MIM':\n                result = value + 273.15;\n                break;\n            case 'MIYD':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'MIFT':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'MIIN':\n                result = (value * 9 / 5) + 32;\n                break;\n            case 'YDM':\n                result = value + 273.15;\n                break;\n            case 'YDMI':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'YDFT':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'YDIN':\n                result = (value * 9 / 5) + 32;\n                break;\n            case 'FTM':\n                result = value + 273.15;\n                break;\n            case 'FTMI':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'FTYD':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'FTIN':\n                result = (value * 9 / 5) + 32;\n                break;\n            case 'INM':\n                result = value + 273.15;\n                break;\n            case 'INMI':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'IN':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'IN':\n                result = (value + 459.67) * 5 / 9;\n                break;\n        }\n\n        return result;\n    }\n\n    static _convertWeight (from, to, value) {\n        let result = value;\n\n        switch (from + to) {\n            case 'CF':\n                result = (value * 9 / 5) + 32;\n                break;\n            case 'CK':\n                result = value + 273.15;\n                break;\n            case 'FC':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'FK':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'KC':\n                result = value - 273.15;\n                break;\n            case 'KF':\n                result = (value * 9 / 5) - 459.67;\n                break;\n        }\n\n        return result;\n    }\n\n    static _convertVolume (from, to, value) {\n        let result = value;\n\n        switch (from + to) {\n            case 'CF':\n                result = (value * 9 / 5) + 32;\n                break;\n            case 'CK':\n                result = value + 273.15;\n                break;\n            case 'FC':\n                result = (value - 32) * 5 / 9;\n                break;\n            case 'FK':\n                result = (value + 459.67) * 5 / 9;\n                break;\n            case 'KC':\n                result = value - 273.15;\n                break;\n            case 'KF':\n                result = (value * 9 / 5) - 459.67;\n                break;\n        }\n\n        return result;\n    }\n}\n\nexport default ConverterManager;"]}