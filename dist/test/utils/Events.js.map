{"version":3,"sources":["../../../src/utils/Events.js"],"names":["Events","me","listeners","Map","eventName","callback","has","set","get","push","stack","i","l","length","splice","call"],"mappings":";;;;;;;;;;IACMA,M;AAEF,sBAAe;AAAA;;AACX,YAAMC,KAAK,IAAX;;AAEAA,WAAGC,SAAH,GAAe,IAAIC,GAAJ,EAAf;AACH;;;;yCAEgBC,S,EAAWC,Q,EAAU;AAClC,gBAAMJ,KAAK,IAAX;;AAEA,gBAAI,CAACA,GAAGC,SAAH,CAAaI,GAAb,CAAiBF,SAAjB,CAAL,EAAkC;AAC9BH,mBAAGC,SAAH,CAAaK,GAAb,CAAiBH,SAAjB,EAA4B,EAA5B;AACH;;AAEDH,eAAGC,SAAH,CAAaM,GAAb,CAAiBJ,SAAjB,EAA4BK,IAA5B,CAAiCJ,QAAjC;AACH;;;4CAEoBD,S,EAAWC,Q,EAAU;AACtC,gBAAMJ,KAAK,IAAX;;AAEA,gBAAI,CAACA,GAAGC,SAAH,CAAaI,GAAb,CAAiBF,SAAjB,CAAL,EAAkC;AAC9B;AACH;;AAED,gBAAMM,QAAQT,GAAGC,SAAH,CAAaM,GAAb,CAAiBJ,SAAjB,CAAd;;AAEA,iBAAK,IAAIO,IAAI,CAAR,EAAWC,IAAIF,MAAMG,MAA1B,EAAkCF,IAAIC,CAAtC,EAAyCD,GAAzC,EAA8C;AAC1C,oBAAID,MAAMC,CAAN,MAAaN,QAAjB,EAA0B;AACtBK,0BAAMI,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACA;AACH;AACJ;AACJ;;;sCAEcP,S,EAAW;AACtB,gBAAMH,KAAK,IAAX;;AAEA,gBAAI,CAACA,GAAGC,SAAH,CAAaI,GAAb,CAAiBF,SAAjB,CAAL,EAAkC;AAC9B,uBAAO,IAAP;AACH;;AAED,gBAAMM,QAAQT,GAAGC,SAAH,CAAaM,GAAb,CAAiBJ,SAAjB,CAAd;;AAEA,iBAAK,IAAIO,IAAI,CAAR,EAAWC,IAAIF,MAAMG,MAA1B,EAAkCF,IAAIC,CAAtC,EAAyCD,GAAzC,EAA8C;AAC1CD,sBAAMC,CAAN,EAASI,IAAT,CAAcd,EAAd;AACH;;AAED;AACH;;;;;;kBAGUD,M","file":"Events.js","sourcesContent":["\r\nclass Events {\r\n\r\n    constructor () {\r\n        const me = this;\r\n\r\n        me.listeners = new Map();\r\n    }\r\n\r\n    addEventListener(eventName, callback) {\r\n        const me = this;\r\n\r\n        if (!me.listeners.has(eventName)) {\r\n            me.listeners.set(eventName, []);\r\n        }\r\n\r\n        me.listeners.get(eventName).push(callback);\r\n    }\r\n\r\n    removeEventListener (eventName, callback) {\r\n        const me = this;\r\n\r\n        if (!me.listeners.has(eventName)) {\r\n            return;\r\n        }\r\n\r\n        const stack = me.listeners.get(eventName);\r\n\r\n        for (let i = 0, l = stack.length; i < l; i++) {\r\n            if (stack[i] === callback){\r\n                stack.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent (eventName) {\r\n        const me = this;\r\n\r\n        if (!me.listeners.has(eventName)) {\r\n            return true;\r\n        }\r\n\r\n        const stack = me.listeners.get(eventName);\r\n\r\n        for (let i = 0, l = stack.length; i < l; i++) {\r\n            stack[i].call(me);\r\n        }\r\n\r\n        return;\r\n    }\r\n}\r\n\r\nexport default Events;"]}