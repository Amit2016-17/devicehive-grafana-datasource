{"version":3,"sources":["../../src/DeviceHive.js"],"names":["DeviceHive","login","password","serverUrl","token","me","socket","WebSocket","isOpen","isAuthenticated","addEventListener","console","warn","Error","messageObject","_getReadyClient","then","Promise","resolve","reject","requestId","uniqueId","send","JSON","stringify","listener","event","messageData","parse","data","action","removeEventListener","status","error","accessToken","refreshToken","authenticate","catch","onOpen"],"mappings":"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","file":"DeviceHive.js","sourcesContent":["import lodash from \"lodash\";\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass DeviceHive {\r\n\r\n    /**\r\n     * Creates an instance of DeviceHive.\r\n     * @param {Object} { login, password, serverUrl, token }\r\n     * @memberof DeviceHive\r\n     */\r\n    constructor({ login, password, serverUrl, token }) {\r\n        const me = this;\r\n\r\n        if (serverUrl && ((login && password) || token )) {\r\n            me.socket = new WebSocket(serverUrl);\r\n            me.login = login;\r\n            me.password = password;\r\n            me.serverUrl = serverUrl;\r\n            me.token = token;\r\n            me.isOpen = false;\r\n            me.isAuthenticated = false;\r\n\r\n            me.socket.addEventListener(`open`, () => me.isOpen = true);\r\n            me.socket.addEventListener(`close`, () => me.isOpen = false);\r\n        } else {\r\n            console.warn(`You need to specify URL, login and password or token`);\r\n            throw new Error(`You need to specify URL, login and password or token`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send message object over WS session by the key\r\n     * @param messageObject\r\n     * @return {Promise}\r\n     */\r\n    send(messageObject) {\r\n        const me = this;\r\n\r\n        return me._getReadyClient()\r\n            .then(() => new Promise((resolve, reject) => {\r\n                messageObject.requestId = messageObject.requestId || lodash.uniqueId(`deviceHiveId_`);\r\n                me.socket.send(JSON.stringify(messageObject));\r\n\r\n                const listener = (event) => {\r\n                    const messageData = JSON.parse(event.data);\r\n\r\n                    if (messageData.action === messageObject.action &&\r\n                        messageData.requestId === messageObject.requestId) {\r\n                        me.socket.removeEventListener(`message`, listener);\r\n                        me.isAuthenticated = messageData.status === `success`;\r\n                        messageData.status === `success` ? resolve(messageData) : reject(messageData.error);\r\n                    }\r\n                };\r\n\r\n                me.socket.addEventListener(`message`, listener);\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Internal `authenticate` message sender\r\n     *\r\n     * @param {String} accessToken\r\n     * @memberof DeviceHive\r\n     */\r\n    authenticate({ token, login, password } = {}) {\r\n        const me = this;\r\n\r\n        me.token = token || me.token;\r\n        me.login = login || me.login;\r\n        me.password = password || me.password;\r\n\r\n        return  me.isAuthenticated ? Promise.resolve() : (me.token ?\r\n            me.send({ action: `authenticate`, token: me.token }) :\r\n            me.send({ action: `token`, login: me.login,  password: me.password })\r\n                .then(({ accessToken, refreshToken }) => me.authenticate({ token: accessToken }))\r\n                .catch(() => me.authenticate({ login: me.login, password: me.password })))\r\n            .then(() => me.isAuthenticated = true );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {Promise}\r\n     * @private\r\n     */\r\n    _getReadyClient() {\r\n        const me = this;\r\n\r\n        function onOpen(resolve) {\r\n            me.socket.removeEventListener(`open`, onOpen);\r\n            resolve(me)\r\n        }\r\n\r\n        return new Promise((resolve) => me.isOpen ? resolve(me) : me.socket.addEventListener(`open`, () => onOpen(resolve)));\r\n    }\r\n}\r\n\r\n\r\nexport default DeviceHive;"]}