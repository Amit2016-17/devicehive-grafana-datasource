{"version":3,"sources":["../../src/GenericDatasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","token","options","authenticate","then","Promise","all","targets","filter","target","hide","map","send","action","deviceId","notification","_processVariables","start","range","from","toDate","getTime","end","to","sortField","sortOrder","take","skip","data","results","result","index","scale","dataPath","refId","datapoints","_extractValueByPath","utc","timestamp","format","resolve","status","message","title","catch","error","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field"],"mappings":"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","file":"GenericDatasource.js","sourcesContent":["import moment from 'moment';\r\nimport DeviceHive from './DeviceHive';\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass GenericDatasource {\r\n\r\n    /**\r\n     * Creates an instance of GenericDatasource.\r\n     * @param {Object} instanceSettings\r\n     * @param {any} $q\r\n     * @param backendSrv\r\n     * @param templateSrv\r\n     * @memberof GenericDatasource\r\n     */\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        const me = this;\r\n\r\n        me.q = $q;\r\n        me.type = instanceSettings.type;\r\n        me.url = instanceSettings.url;\r\n        me.name = instanceSettings.name;\r\n        me.jsonData = instanceSettings.jsonData;\r\n        me.templateSrv = templateSrv;\r\n        me.deviceHive = new DeviceHive({\r\n            serverUrl: me.jsonData.serverURL,\r\n            login: me.jsonData.auth.login,\r\n            password: me.jsonData.auth.password,\r\n            token: me.jsonData.auth.token\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to query data\r\n     *\r\n     * @param {Object} options\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    query(options) {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.all(options.targets\r\n                .filter(target => target.hide !== true )\r\n                .map(target => me.deviceHive.send({\r\n                    action: `${target.type}/list`,\r\n                    deviceId: me.jsonData.deviceId,\r\n                    notification: me._processVariables(target.name),\r\n                    start: options.range.from.toDate().getTime(),\r\n                    end: options.range.to.toDate().getTime(),\r\n                    sortField: `timestamp`,\r\n                    sortOrder: `ASC`,\r\n                    take: 10000,\r\n                    skip: 0\r\n                }))\r\n            ))\r\n            .then(results => {\r\n                return {\r\n                    data: results.map((result, index) => {\r\n                        const type = options.targets[index].type;\r\n                        const scale = me._processVariables(options.targets[index].scale);\r\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\r\n                        const refId = options.targets[index].refId;\r\n\r\n                        return {\r\n                            target: `${type}${refId}`,\r\n                            datapoints: result[`${type}s`].map(target => {\r\n                                return [\r\n                                    me._extractValueByPath(target, dataPath) * (scale === `` ? 1 : scale),\r\n                                    +moment.utc(target.timestamp).format(`x`)\r\n                                ]\r\n                            })\r\n                        };\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to test datasource\r\n     *\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    testDatasource() {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.resolve({status: `success`, message: `Data source is working`, title: `Success`}))\r\n            .catch((error) => Promise.resolve({status: `error`, message: error, title: `Error`}));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stringWithVariables\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _processVariables(stringWithVariables) {\r\n        const me = this;\r\n\r\n        return me.templateSrv.replace(`${stringWithVariables}`);\r\n    }\r\n\r\n    /**\r\n     * Internal function to extract value from object based on path\r\n     *\r\n     * @param {Object} object\r\n     * @param {String} path\r\n     * @returns\r\n     * @memberof DeviceHive\r\n     */\r\n    _extractValueByPath(object, path) {\r\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\r\n        let current = object;\r\n\r\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\r\n\r\n        return current;\r\n    }\r\n}\r\n\r\n\r\nexport default GenericDatasource\r\n"]}