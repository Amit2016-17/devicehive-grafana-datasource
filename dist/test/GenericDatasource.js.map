{"version":3,"sources":["../../src/GenericDatasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","token","options","authenticate","then","Promise","all","targets","filter","target","hide","map","send","_generateRequestObject","data","results","result","index","scale","_processVariables","dataPath","refId","datapoints","_extractValueByPath","utc","timestamp","format","console","log","annotation","resolve","status","message","title","catch","error","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field","allOptions","resultObj","action","deviceId","start","range","from","toDate","getTime","end","to","sortField","sortOrder","skip"],"mappings":"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","file":"GenericDatasource.js","sourcesContent":["import moment from 'moment';\r\nimport DeviceHive from './DeviceHive';\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass GenericDatasource {\r\n\r\n    /**\r\n     * Creates an instance of GenericDatasource.\r\n     * @param {Object} instanceSettings\r\n     * @param {any} $q\r\n     * @param backendSrv\r\n     * @param templateSrv\r\n     * @memberof GenericDatasource\r\n     */\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        const me = this;\r\n\r\n        me.q = $q;\r\n        me.type = instanceSettings.type;\r\n        me.url = instanceSettings.url;\r\n        me.name = instanceSettings.name;\r\n        me.jsonData = instanceSettings.jsonData;\r\n        me.templateSrv = templateSrv;\r\n        me.deviceHive = new DeviceHive({\r\n            serverUrl: me.jsonData.serverURL,\r\n            login: me.jsonData.auth.login,\r\n            password: me.jsonData.auth.password,\r\n            token: me.jsonData.auth.token\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to query data\r\n     *\r\n     * @param {Object} options\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    query(options) {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.all(options.targets\r\n                .filter(target => target.hide !== true )\r\n                .map(target => me.deviceHive.send(me._generateRequestObject(target, options)))\r\n            ))\r\n            .then(results => {\r\n                return {\r\n                    data: results.map((result, index) => {\r\n                        const type = options.targets[index].type;\r\n                        const scale = me._processVariables(options.targets[index].scale);\r\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\r\n                        const refId = options.targets[index].refId;\r\n\r\n                        return {\r\n                            target: `${type}${refId}`,\r\n                            datapoints: result[`${type}s`].map(target => {\r\n                                return [\r\n                                    me._extractValueByPath(target, dataPath) * (scale === `` ? 1 : scale),\r\n                                    +moment.utc(target.timestamp).format(`x`)\r\n                                ]\r\n                            })\r\n                        };\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     * @returns {Promise.<TResult>}\r\n     */\r\n    annotationQuery(options) {\r\n        const me = this;\r\n        console.log(options.annotation);\r\n        return me.deviceHive.authenticate()\r\n            .then(() => me.deviceHive.send(me._generateRequestObject(options.annotation, options)))\r\n            .then(result => {\r\n                const type = options.annotation.type;\r\n                const dataPath = me._processVariables(options.annotation.dataPath);\r\n\r\n                return {\r\n                    data: result[`${type}s`].map((result, index) => {\r\n                        return me._extractValueByPath(result, dataPath);\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to test datasource\r\n     *\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    testDatasource() {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.resolve({status: `success`, message: `Data source is working`, title: `Success`}))\r\n            .catch((error) => Promise.resolve({status: `error`, message: error, title: `Error`}));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stringWithVariables\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _processVariables(stringWithVariables) {\r\n        const me = this;\r\n\r\n        return me.templateSrv.replace(`${stringWithVariables}`);\r\n    }\r\n\r\n    /**\r\n     * Internal function to extract value from object based on path\r\n     *\r\n     * @param {Object} object\r\n     * @param {String} path\r\n     * @returns\r\n     * @memberof DeviceHive\r\n     */\r\n    _extractValueByPath(object, path) {\r\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\r\n        let current = object;\r\n\r\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\r\n\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param target\r\n     * @param allOptions\r\n     * @returns {{action: string, deviceId: *, start: number, end: number, sortField: string, sortOrder: string, skip: number}}\r\n     * @private\r\n     */\r\n    _generateRequestObject(target, allOptions) {\r\n        const me = this;\r\n        const resultObj = {\r\n            action: `${target.type}/list`,\r\n            deviceId: me.jsonData.deviceId,\r\n            start: allOptions.range.from.toDate().getTime(),\r\n            end: allOptions.range.to.toDate().getTime(),\r\n            sortField: `timestamp`,\r\n            sortOrder: `ASC`,\r\n            skip: 0\r\n        };\r\n\r\n        resultObj[target.type] = me._processVariables(target.name);\r\n\r\n        return resultObj;\r\n    }\r\n}\r\n\r\n\r\nexport default GenericDatasource\r\n"]}