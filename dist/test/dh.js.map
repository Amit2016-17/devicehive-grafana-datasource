{"version":3,"sources":["../../src/dh.js"],"names":["DeviceHiveClient","login","password","serverURL","token","__socket","WebSocket","authInfo","Promise","resolve","addEventListener","event","Error","send","JSON","stringify","action","targets","deviceId","dateRange","extractedTargets","slice","reduce","obj","item","type","path","dataPath","scale","refId","types","Object","keys","results","request","length","commandNotificationHandler","messageData","parse","data","actions","split","includes","datas","forEach","points","__extractValue","push","utc","timestamp","format","sort","a","b","target","datapoints","pointsX","pointsY","pointsZ","map","value","azimuth","roll","pitch","Math","cos","sin","removeEventListener","reject","createTokenPair","__authenticate","authHandler","status","__tokenMessage","then","accessToken","console","log","tokens","refreshToken","object","current","fields","filter","elem","field","undefined"],"mappings":"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","file":"dh.js","sourcesContent":["import moment from 'moment';\n\nexport default class DeviceHiveClient {\n  /**\n   * Creates an instance of DeviceHiveClient.\n   * @param {Object} { login, password, serverURL, token } \n   * @memberof DeviceHiveClient\n   */\n  constructor({ login, password, serverURL, token }){\n    if (serverURL && ((login && password) || token )) {\n      this.__socket = new WebSocket(serverURL);\n      this.authInfo = {\n        login,\n        password,\n        token\n      };\n      return new Promise((resolve) => {\n        this.__socket.addEventListener(`open`, (event) => {\n          resolve(this);\n        })\n      })\n    } else {\n      throw new Error(`You need to specify URL, login and password or token`);\n    }\n  }\n\n  /**\n   * Create token pair based on login\\password auth\n   * \n   * @param {String} login \n   * @param {String} password \n   * @memberof DeviceHiveClient\n   */\n  createTokenPair(login, password){\n    this.__socket.send(JSON.stringify({\n      action : `token`,\n      login,\n      password\n    }));\n  }\n\n  /**\n   * Query data by passed params\n   * \n   * @param {Array[Object]} targets \n   * @param {String} deviceId \n   * @param {Object} dateRange \n   * @returns \n   * @memberof DeviceHiveClient\n   */\n  queryData(targets, deviceId, dateRange){\n    return new Promise((resolve) => {\n      const extractedTargets = targets\n        .slice(0)\n        .reduce((obj, item) => {\n          if (!obj[item.type]){\n            obj[item.type] = [{ path : item.dataPath, scale : item.scale === `` ? 1 : item.scale, refId : item.refId }];\n          } else {\n            obj[item.type] = [\n              ...obj[item.type],\n              {\n                path : item.dataPath,\n                scale : item.scale === `` ? 1 : item.scale,\n                refId : item.refId\n              }\n            ];\n          }\n          return obj;\n        }, {});\n      const types = Object.keys(extractedTargets);\n      const results = [];\n      let request = types.length;\n      const commandNotificationHandler = (event) => {\n        const messageData = JSON.parse(event.data);\n        const actions = messageData.action.split(`/`);\n        if (types.includes(actions[0]) && actions[1] === `list`){\n          request--;\n          const datas = messageData[`${actions[0]}s`];\n          extractedTargets[actions[0]].forEach(({ path, scale, refId }) => {\n            if (!path.includes(`Orient`)){\n              const points = [];\n              datas.forEach(data => {\n                if (typeof this.__extractValue(data, path) !== `object`){\n                  points.push([this.__extractValue(data, path) * scale, +moment.utc(data.timestamp).format(`x`)]);\n                }\n              });\n              points.sort((a, b) => a[1] - b[1]);\n              results.push({\n                target : `${actions[0]}${refId}`,\n                datapoints : points\n              })\n            } else {\n              const pointsX = [];\n              const pointsY = [];\n              const pointsZ = [];\n              datas.forEach(data => {\n                if (typeof this.__extractValue(data, path) !== `object`){\n                  const [azimuth, roll, pitch] = this.__extractValue(data, path).split(`,`).map(value => +value);\n                  pointsX.push([-Math.cos(azimuth)*Math.sin(pitch)*Math.sin(roll) - Math.sin(azimuth)*Math.cos(roll), +moment.utc(data.timestamp).format(`x`)]);\n                  pointsY.push([-Math.sin(azimuth)*Math.sin(pitch)*Math.sin(roll) + Math.cos(azimuth)*Math.cos(roll), +moment.utc(data.timestamp).format(`x`)]);\n                  pointsZ.push([Math.cos(pitch)*Math.sin(roll), +moment.utc(data.timestamp).format(`x`)]);\n                }\n              });\n              pointsX.sort((a, b) => a[1] - b[1]);\n              pointsY.sort((a, b) => a[1] - b[1]);\n              pointsZ.sort((a, b) => a[1] - b[1]);\n\n              results.push({\n                target : `X`,\n                datapoints : [[pointsX[0][0]], [0]]\n              });\n              results.push({\n                target : `Y`,\n                datapoints : [[pointsY[0][0]], [0]]\n              });\n              results.push({\n                target : `Z`,\n                datapoints : [[pointsZ[0][0]], [0]]\n              });\n            }\n          })\n          if (!request){\n            this.__socket.removeEventListener(`message`, commandNotificationHandler);\n            resolve({\n              data : results\n            })\n          }\n        }\n      }\n      this.__socket.addEventListener(`message`, commandNotificationHandler);\n      types.forEach(type => \n        this.__socket.send(JSON.stringify({\n          action : `${type}/list`,\n          deviceId : deviceId\n        }))\n      );\n    })\n  }\n\n  /**\n   * Function used to test datasource connection and auth\n   * \n   * @returns \n   * @memberof DeviceHiveClient\n   */\n  testDatasource(){\n    return new Promise((resolve, reject) => {\n      if (!this.authInfo.token){\n        this.createTokenPair(this.authInfo.login, this.authInfo.password);\n      } else {\n        this.__authenticate(this.authInfo.token);\n      }\n      const authHandler = (event) => {\n        const messageData = JSON.parse(event.data);\n        if ((messageData.action === `token` || messageData.action === `authenticate`) && messageData.status === `success`){\n          switch (messageData.action) {\n          case `token` : \n            return this.__tokenMessage(messageData)\n            .then((accessToken) => this.__authenticate(accessToken));\n          case `authenticate`:\n            this.__socket.removeEventListener(`message`, authHandler);\n            return resolve();\n          }\n        } else {\n          if (messageData.status === `error`){\n            console.log(messageData);\n            this.__socket.removeEventListener(`message`, authHandler);\n            reject(messageData);\n          }\n        }\n      }\n      this.__socket.addEventListener(`message`, authHandler);\n    })\n  }\n\n  /**\n   * Internal handler on `token` type message\n   * \n   * @param {Object} messageData \n   * @returns \n   * @memberof DeviceHiveClient\n   */\n  __tokenMessage(messageData){\n    this.tokens = {\n      accessToken : messageData.accessToken,\n      refreshToken : messageData.refreshToken\n    }\n    return Promise.resolve(this.tokens.accessToken);\n  }\n  \n  /**\n   * Internal `authenticate` message sender\n   * \n   * @param {String} accessToken \n   * @memberof DeviceHiveClient\n   */\n  __authenticate(accessToken){\n    this.__socket.send(JSON.stringify({\n      action : `authenticate`,\n      token : accessToken\n    }));\n  }\n\n  /**\n   * Internal function to extract value from object based on path\n   * \n   * @param {Object} object \n   * @param {String} path \n   * @returns \n   * @memberof DeviceHiveClient\n   */\n  __extractValue(object, path){\n    let current = object;\n    const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\n    fields.forEach(field => {\n      if (current[field] !== undefined){\n        current = current[field];\n      } else {\n        current = null;\n      }\n    })\n    return (typeof current === `string` && !path.includes(`Orient`)) ? +current : current;\n  }\n}\n"]}