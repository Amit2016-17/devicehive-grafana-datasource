{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","jsonData","dhClientPromise","q","authType","authenticate","auth","serverURL","login","password","then","dhClient","token","options","me","targets","map","dataPath","_processDataPath","target","scale","refId","queryData","deviceId","from","range","_d","to","result","testDatasource","variableExists","variables","find","variable","getVariableName","current","value","Promise","resolve","status","message","title","catch","error"],"mappings":"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","file":"datasource.js","sourcesContent":["import DeviceHiveClient from './dh';\r\nimport _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n    /**\r\n     * Creates an instance of GenericDatasource.\r\n     * @param {Object} instanceSettings\r\n     * @param {any} $q\r\n     * @param backendSrv\r\n     * @param templateSrv\r\n     * @memberof GenericDatasource\r\n     */\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.jsonData = instanceSettings.jsonData;\r\n        this.dhClientPromise = null;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = templateSrv;\r\n\r\n        this.q = $q;\r\n        if (instanceSettings.jsonData) {\r\n            if (instanceSettings.jsonData.authType === `Login/Password` || instanceSettings.jsonData.authType === `Token`) {\r\n                this.authenticate(this.jsonData.authType, this.jsonData.auth, this.jsonData.serverURL);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Authenticates user\r\n     *\r\n     * @param {String} type\r\n     * @param {Object} auth\r\n     * @param {String} url\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    authenticate(type, auth, url) {\r\n        if (type === `Login/Password`) {\r\n            return this.dhClientPromise = new DeviceHiveClient({\r\n                login: auth.login,\r\n                password: auth.password,\r\n                serverURL: url\r\n            })\r\n                .then(dhClient => {\r\n                    this.dhClient = dhClient;\r\n                    return dhClient;\r\n                });\r\n        } else if (type === `Token`) {\r\n            return this.dhClientPromise = new DeviceHiveClient({\r\n                token: auth.token,\r\n                serverURL: url\r\n            })\r\n                .then(dhClient => {\r\n                    this.dhClient = dhClient;\r\n                    return dhClient;\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to query data\r\n     *\r\n     * @param {Object} options\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    query(options) {\r\n        const me = this;\r\n        const targets = options.targets.map(target => ({\r\n            dataPath: me._processDataPath(target.dataPath),\r\n            scale: target.scale,\r\n            refId: target.refId,\r\n            type: target.type\r\n        }));\r\n\r\n        if (me.dhClient) {\r\n            return me.dhClient\r\n                .queryData(targets, me.jsonData.deviceId, {from: options.range.from._d, to: options.range.to._d})\r\n                .then(result => {\r\n                    return result;\r\n                });\r\n        } else {\r\n            return me.authenticate(this.jsonData.authType, me.jsonData.auth, me.jsonData.serverURL)\r\n                .then(dhClient => dhClient.testDatasource())\r\n                .then(() => {\r\n                    return me.dhClient.queryData(targets, me.jsonData.deviceId, {\r\n                        from: options.range.from._d,\r\n                        to: options.range.to._d\r\n                    })\r\n                })\r\n                .then(result => {\r\n                    return result;\r\n                });\r\n        }\r\n    }\r\n\r\n    _processDataPath(dataPath) {\r\n        const me = this;\r\n\r\n        return me.templateSrv.variableExists(dataPath) ? dataPath = me.templateSrv.variables\r\n            .find((variable) => variable.name === me.templateSrv.getVariableName(dataPath)).current.value :\r\n            dataPath;\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to test datasource\r\n     *\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    testDatasource() {\r\n        return this.dhClientPromise\r\n            .then(dhClient => dhClient.testDatasource())\r\n            .then(() => Promise.resolve({status: `success`, message: `Data source is working`, title: `Success`}))\r\n            .catch((message) => Promise.resolve({status: `error`, message: message.error, title: `Error`}));\r\n    }\r\n}\r\n"]}