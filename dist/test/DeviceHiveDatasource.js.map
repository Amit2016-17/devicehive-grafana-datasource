{"version":3,"sources":["../../src/DeviceHiveDatasource.js"],"names":["converterManager","DeviceHiveDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","token","options","authenticate","then","Promise","all","targets","filter","target","hide","map","send","_generateRequestObject","maxDataPoints","data","results","result","index","dataPath","_processVariables","refId","datapoints","_convertValue","_extractValueByPath","converters","utc","timestamp","format","annotation","config","limit","item","annotationObj","time","resolve","status","message","title","catch","error","value","reduce","v","converter","convert","argValues","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field","allOptions","resultObj","action","deviceId","start","range","from","toDate","getTime","end","to","sortField","sortOrder","take"],"mappings":"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","file":"DeviceHiveDatasource.js","sourcesContent":["import moment from 'moment';\nimport DeviceHive from './DeviceHive';\nimport ConverterManager from './ConverterManager.js';\n\nconst converterManager = new ConverterManager();\n\n/**\n *\n */\nclass DeviceHiveDatasource {\n\n    /**\n     * Creates an instance of DeviceHiveDatasource.\n     * @param {Object} instanceSettings\n     * @param {any} $q\n     * @param backendSrv\n     * @param templateSrv\n     * @memberof DeviceHiveDatasource\n     */\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        const me = this;\n\n        me.q = $q;\n        me.type = instanceSettings.type;\n        me.url = instanceSettings.url;\n        me.name = instanceSettings.name;\n        me.jsonData = instanceSettings.jsonData;\n        me.templateSrv = templateSrv;\n        me.deviceHive = new DeviceHive({\n            serverUrl: me.jsonData.serverURL,\n            login: me.jsonData.auth.login,\n            password: me.jsonData.auth.password,\n            token: me.jsonData.auth.token\n        });\n    }\n\n    /**\n     * Function used by Grafana to query data\n     *\n     * @param {Object} options\n     * @returns\n     * @memberof DeviceHiveDatasource\n     */\n    query(options) {\n        const me = this;\n\n        return me.deviceHive.authenticate()\n            .then(() => Promise.all(options.targets\n                .filter(target => target.hide !== true )\n                .map(target => me.deviceHive.send(me._generateRequestObject(target, options, options.maxDataPoints)))\n            ))\n            .then(results => {\n                return {\n                    data: results.map((result, index) => {\n                        const type = options.targets[index].type;\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\n                        const refId = options.targets[index].refId;\n\n                        return {\n                            target: `${type}${refId}`,\n                            datapoints: result[`${type}s`].map(target => {\n                                return [\n                                    me._convertValue(me._extractValueByPath(target, dataPath), options.targets[index].converters),\n                                    +moment.utc(target.timestamp).format(`x`)\n                                ]\n                            })\n                        };\n                    })\n                }\n            });\n    }\n\n    /**\n     *\n     * @param options\n     * @returns {Promise}\n     */\n    annotationQuery(options) {\n        const me = this;\n\n        return me.deviceHive.authenticate()\n            .then(() => me.deviceHive.send(me._generateRequestObject(\n                options.annotation.config, options, options.annotation.limit)))\n            .then(result => {\n                const type = options.annotation.config.type;\n                const dataPath = me._processVariables(options.annotation.config.dataPath);\n\n                return result[`${type}s`].map((item) => {\n                    const annotationObj = me._extractValueByPath(item, dataPath);\n                    annotationObj.annotation = options.annotation;\n                    annotationObj.time = annotationObj.time || +moment.utc(item.timestamp).format(`x`);\n\n                    return annotationObj;\n                });\n            });\n    }\n\n    /**\n     * Function used by Grafana to test datasource\n     *\n     * @returns\n     * @memberof DeviceHiveDatasource\n     */\n    testDatasource() {\n        const me = this;\n\n        return me.deviceHive.authenticate()\n            .then(() => Promise.resolve({ status: `success`, message: `Data source is working`, title: `Success` }))\n            .catch((error) => Promise.resolve({ status: `error`, message: error, title: `Error` }));\n    }\n\n    /**\n     *\n     * @param value\n     * @param converters\n     * @private\n     */\n    _convertValue(value, converters) {\n        return converters.reduce((v, converter) =>\n            converterManager.convert(converter.name, v, converter.argValues), value);\n    }\n\n    /**\n     *\n     * @param stringWithVariables\n     * @return {*}\n     * @private\n     */\n    _processVariables(stringWithVariables) {\n        const me = this;\n\n        return me.templateSrv.replace(`${stringWithVariables}`);\n    }\n\n    /**\n     * Internal function to extract value from object based on path\n     *\n     * @param {Object} object\n     * @param {String} path\n     * @returns\n     * @memberof DeviceHive\n     */\n    _extractValueByPath(object, path) {\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\n        let current = object;\n\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\n\n        return current;\n    }\n\n    /**\n     *\n     * @param target\n     * @param allOptions\n     * @param limit\n     * @returns {Object}\n     * @private\n     */\n    _generateRequestObject(target, allOptions, limit) {\n        const me = this;\n        const resultObj = {\n            action: `${target.type}/list`,\n            deviceId: me.jsonData.deviceId,\n            start: allOptions.range.from.toDate().getTime(),\n            end: allOptions.range.to.toDate().getTime(),\n            sortField: `timestamp`,\n            sortOrder: `ASC`,\n            take: limit || 100\n        };\n\n        resultObj[target.type] = me._processVariables(target.name);\n\n        return resultObj;\n    }\n}\n\n\nexport default DeviceHiveDatasource\n"]}