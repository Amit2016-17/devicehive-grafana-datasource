{"version":3,"sources":["../../src/DeviceHiveDatasource.js"],"names":["converterManager","DeviceHiveDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","accessToken","refreshToken","options","Promise","all","targets","filter","target","hide","map","send","_generateRequestObject","maxDataPoints","then","data","results","result","index","label","dataPath","_processVariables","refId","datapoints","_convertValue","_extractValueByPath","converters","utc","timestamp","format","catch","error","reject","status","message","title","annotation","config","limit","item","annotationObj","time","authenticate","resolve","value","reduce","v","converter","convert","argValues","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field","allOptions","resultObj","action","deviceId","start","range","from","toDate","getTime","end","to","sortField","sortOrder","take"],"mappings":"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","file":"DeviceHiveDatasource.js","sourcesContent":["import moment from 'moment';\r\nimport DeviceHive from './DeviceHive';\r\nimport ConverterManager from './ConverterManager.js';\r\n\r\nconst converterManager = new ConverterManager();\r\n\r\n\r\n/**\r\n * DeviceHive datasource class\r\n * Datasource object communicates with the database and transforms data to times series.\r\n */\r\nclass DeviceHiveDatasource {\r\n\r\n    /**\r\n     * Creates an instance of DeviceHiveDatasource.\r\n     * @param {Object} instanceSettings\r\n     * @param {any} $q\r\n     * @param backendSrv\r\n     * @param templateSrv\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        const me = this;\r\n\r\n        me.q = $q;\r\n        me.type = instanceSettings.type;\r\n        me.url = instanceSettings.url;\r\n        me.name = instanceSettings.name;\r\n        me.jsonData = instanceSettings.jsonData;\r\n        me.templateSrv = templateSrv;\r\n        me.deviceHive = new DeviceHive({\r\n            serverUrl: me.jsonData.serverURL,\r\n            login: me.jsonData.auth.login,\r\n            password: me.jsonData.auth.password,\r\n            accessToken: me.jsonData.auth.accessToken,\r\n            refreshToken: me.jsonData.auth.refreshToken,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to query data\r\n     * @param {Object} options\r\n     * @returns\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    query(options) {\r\n        const me = this;\r\n\r\n        return Promise.all(options.targets\r\n                .filter(target => target.hide !== true )\r\n                .map(target => me.deviceHive.send(me._generateRequestObject(target, options, options.maxDataPoints))))\r\n            .then(results => {\r\n                return {\r\n                    data: results.map((result, index) => {\r\n                        const type = options.targets[index].type;\r\n                        const label = options.targets[index].label;\r\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\r\n                        const refId = options.targets[index].refId;\r\n\r\n                        return {\r\n                            target: label || `${type}${refId}`,\r\n                            datapoints: result[`${type}s`].map(target => {\r\n                                return [\r\n                                    me._convertValue(me._extractValueByPath(target, dataPath), options.targets[index].converters),\r\n                                    +moment.utc(target.timestamp).format(`x`)\r\n                                ]\r\n                            })\r\n                        };\r\n                    })\r\n                }\r\n            })\r\n            .catch((error) => me.q.reject({ status: `error`, message: error, title: `Error` }));\r\n    }\r\n\r\n    /**\r\n     * Used by dashboards to get annotations\r\n     * @param options\r\n     * @returns {Promise}\r\n     */\r\n    annotationQuery(options) {\r\n        const me = this;\r\n\r\n        return me.deviceHive.send(me._generateRequestObject(\r\n                options.annotation.config, options, options.annotation.limit))\r\n            .then(result => {\r\n                const type = options.annotation.config.type;\r\n                const dataPath = me._processVariables(options.annotation.config.dataPath);\r\n\r\n                return result[`${type}s`].map((item) => {\r\n                    const annotationObj = me._extractValueByPath(item, dataPath);\r\n                    annotationObj.annotation = options.annotation;\r\n                    annotationObj.time = annotationObj.time || +moment.utc(item.timestamp).format(`x`);\r\n\r\n                    return annotationObj;\r\n                });\r\n            })\r\n            .catch((error) => me.q.reject({ status: `error`, message: error, title: `Error` }));\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to test datasource\r\n     * @returns\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    testDatasource() {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.resolve({ status: `success`, message: `Data source is working`, title: `Success` }))\r\n            .catch((error) => me.q.reject({ status: `error`, message: error, title: `Error` }));\r\n    }\r\n\r\n    /**\r\n     * Converting value by ConverterManager\r\n     * @param value\r\n     * @param converters\r\n     * @private\r\n     */\r\n    _convertValue(value, converters) {\r\n        return converters.reduce((v, converter) =>\r\n            converterManager.convert(converter.name, v, converter.argValues), value);\r\n    }\r\n\r\n    /**\r\n     * Transform template variable to it's values\r\n     * @param stringWithVariables\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _processVariables(stringWithVariables) {\r\n        const me = this;\r\n\r\n        return me.templateSrv.replace(`${stringWithVariables}`);\r\n    }\r\n\r\n    /**\r\n     * Internal function to extract value from object based on path\r\n     * @param {Object} object\r\n     * @param {String} path\r\n     * @returns\r\n     * @memberof DeviceHive\r\n     */\r\n    _extractValueByPath(object, path) {\r\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\r\n        let current = object;\r\n\r\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\r\n\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * Generate DeviceHive WS request object\r\n     * @param target\r\n     * @param allOptions\r\n     * @param limit\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _generateRequestObject(target, allOptions, limit) {\r\n        const me = this;\r\n        const resultObj = {\r\n            action: `${target.type}/list`,\r\n            deviceId: me.jsonData.deviceId,\r\n            start: allOptions.range.from.toDate().getTime(),\r\n            end: allOptions.range.to.toDate().getTime(),\r\n            sortField: `timestamp`,\r\n            sortOrder: `ASC`,\r\n            take: limit || 100\r\n        };\r\n\r\n        resultObj[target.type] = me._processVariables(target.name);\r\n\r\n        return resultObj;\r\n    }\r\n}\r\n\r\n\r\nexport default DeviceHiveDatasource\r\n"]}