{"version":3,"sources":["../src/GenericDatasource.js"],"names":["moment","DeviceHive","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","token","options","authenticate","then","Promise","all","targets","filter","target","hide","map","send","_generateRequestObject","data","results","result","index","scale","_processVariables","dataPath","refId","datapoints","_extractValueByPath","utc","timestamp","format","annotation","entityName","res","status","message","title","catch","error","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field","allOptions","resultObj","action","deviceId","start","range","from","toDate","getTime","end","to","sortField","sortOrder","take","skip"],"mappings":"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","file":"GenericDatasource.js","sourcesContent":["import moment from 'moment';\nimport DeviceHive from './DeviceHive';\n\n\n/**\n *\n */\nclass GenericDatasource {\n\n    /**\n     * Creates an instance of GenericDatasource.\n     * @param {Object} instanceSettings\n     * @param {any} $q\n     * @param backendSrv\n     * @param templateSrv\n     * @memberof GenericDatasource\n     */\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        const me = this;\n\n        me.q = $q;\n        me.type = instanceSettings.type;\n        me.url = instanceSettings.url;\n        me.name = instanceSettings.name;\n        me.jsonData = instanceSettings.jsonData;\n        me.templateSrv = templateSrv;\n        me.deviceHive = new DeviceHive({\n            serverUrl: me.jsonData.serverURL,\n            login: me.jsonData.auth.login,\n            password: me.jsonData.auth.password,\n            token: me.jsonData.auth.token\n        });\n    }\n\n    /**\n     * Function used by Grafana to query data\n     *\n     * @param {Object} options\n     * @returns\n     * @memberof GenericDatasource\n     */\n    query(options) {\n        const me = this;\n\n        return me.deviceHive.authenticate()\n            .then(() => Promise.all(options.targets\n                .filter(target => target.hide !== true )\n                .map(target => me.deviceHive.send(me._generateRequestObject(target, options)))\n            ))\n            .then(results => {\n                return {\n                    data: results.map((result, index) => {\n                        const type = options.targets[index].type;\n                        const scale = me._processVariables(options.targets[index].scale);\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\n                        const refId = options.targets[index].refId;\n\n                        return {\n                            target: `${type}${refId}`,\n                            datapoints: result[`${type}s`].map(target => {\n                                return [\n                                    me._extractValueByPath(target, dataPath) * (scale === `` ? 1 : scale),\n                                    +moment.utc(target.timestamp).format(`x`)\n                                ]\n                            })\n                        };\n                    })\n                }\n            });\n    }\n\n    /**\n     *\n     * @param options\n     * @returns {Promise.<TResult>}\n     */\n    annotationQuery(options) {\n        const me = this;\n\n        return me.deviceHive.authenticate()\n            .then(() => me.deviceHive.send(me._generateRequestObject({\n                type: options.annotation.type,\n                name: options.annotation.entityName,\n                dataPath: options.annotation.dataPath\n            }, options)))\n            .then(result => {\n                const type = options.annotation.type;\n                const dataPath = me._processVariables(options.annotation.dataPath);\n\n                return result[`${type}s`].map((result, index) => {\n                    const res = me._extractValueByPath(result, dataPath);\n                    res.annotation = options.annotation;\n\n                    return res;\n                });\n            });\n    }\n\n    /**\n     * Function used by Grafana to test datasource\n     *\n     * @returns\n     * @memberof GenericDatasource\n     */\n    testDatasource() {\n        const me = this;\n\n        return me.deviceHive.authenticate()\n            .then(() => {\n                return { status: `success`, message: `Data source is working`, title: `Success` };\n            })\n            .catch((error) => {\n                return { status: `error`, message: error, title: `Error` };\n            });\n    }\n\n    /**\n     *\n     * @param stringWithVariables\n     * @return {*}\n     * @private\n     */\n    _processVariables(stringWithVariables) {\n        const me = this;\n\n        return me.templateSrv.replace(`${stringWithVariables}`);\n    }\n\n    /**\n     * Internal function to extract value from object based on path\n     *\n     * @param {Object} object\n     * @param {String} path\n     * @returns\n     * @memberof DeviceHive\n     */\n    _extractValueByPath(object, path) {\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\n        let current = object;\n\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\n\n        return current;\n    }\n\n    /**\n     *\n     * @param target\n     * @param allOptions\n     * @returns {{action: string, deviceId: *, start: number, end: number, sortField: string, sortOrder: string, skip: number}}\n     * @private\n     */\n    _generateRequestObject(target, allOptions) {\n        const me = this;\n        const resultObj = {\n            action: `${target.type}/list`,\n            deviceId: me.jsonData.deviceId,\n            start: allOptions.range.from.toDate().getTime(),\n            end: allOptions.range.to.toDate().getTime(),\n            sortField: `timestamp`,\n            sortOrder: `ASC`,\n            take: 10000,\n            skip: 0\n        };\n\n        resultObj[target.type] = me._processVariables(target.name);\n\n        return resultObj;\n    }\n}\n\n\nexport default GenericDatasource\n"]}