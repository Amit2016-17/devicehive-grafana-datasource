{"version":3,"sources":["../src/GenericDatasource.js"],"names":["moment","DeviceHive","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","token","options","authenticate","then","Promise","all","targets","filter","target","hide","map","send","action","deviceId","notification","_processVariables","start","range","from","toDate","getTime","end","to","sortField","sortOrder","take","skip","data","results","result","index","scale","dataPath","refId","datapoints","_extractValueByPath","utc","timestamp","format","resolve","status","message","title","catch","error","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field"],"mappings":"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","file":"GenericDatasource.js","sourcesContent":["import moment from 'moment';\r\nimport DeviceHive from './DeviceHive';\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass GenericDatasource {\r\n\r\n    /**\r\n     * Creates an instance of GenericDatasource.\r\n     * @param {Object} instanceSettings\r\n     * @param {any} $q\r\n     * @param backendSrv\r\n     * @param templateSrv\r\n     * @memberof GenericDatasource\r\n     */\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        const me = this;\r\n\r\n        me.q = $q;\r\n        me.type = instanceSettings.type;\r\n        me.url = instanceSettings.url;\r\n        me.name = instanceSettings.name;\r\n        me.jsonData = instanceSettings.jsonData;\r\n        me.templateSrv = templateSrv;\r\n        me.deviceHive = new DeviceHive({\r\n            serverUrl: me.jsonData.serverURL,\r\n            login: me.jsonData.auth.login,\r\n            password: me.jsonData.auth.password,\r\n            token: me.jsonData.auth.token\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to query data\r\n     *\r\n     * @param {Object} options\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    query(options) {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.all(options.targets\r\n                .filter(target => target.hide !== true )\r\n                .map(target => me.deviceHive.send({\r\n                    action: `${target.type}/list`,\r\n                    deviceId: me.jsonData.deviceId,\r\n                    notification: me._processVariables(target.name),\r\n                    start: options.range.from.toDate().getTime(),\r\n                    end: options.range.to.toDate().getTime(),\r\n                    sortField: `timestamp`,\r\n                    sortOrder: `ASC`,\r\n                    take: 10000,\r\n                    skip: 0\r\n                }))\r\n            ))\r\n            .then(results => {\r\n                return {\r\n                    data: results.map((result, index) => {\r\n                        const type = options.targets[index].type;\r\n                        const scale = me._processVariables(options.targets[index].scale);\r\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\r\n                        const refId = options.targets[index].refId;\r\n\r\n                        return {\r\n                            target: `${type}${refId}`,\r\n                            datapoints: result[`${type}s`].map(target => {\r\n                                return [\r\n                                    me._extractValueByPath(target, dataPath) * (scale === `` ? 1 : scale),\r\n                                    +moment.utc(target.timestamp).format(`x`)\r\n                                ]\r\n                            })\r\n                        };\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to test datasource\r\n     *\r\n     * @returns\r\n     * @memberof GenericDatasource\r\n     */\r\n    testDatasource() {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.resolve({status: `success`, message: `Data source is working`, title: `Success`}))\r\n            .catch((error) => Promise.resolve({status: `error`, message: error, title: `Error`}));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stringWithVariables\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _processVariables(stringWithVariables) {\r\n        const me = this;\r\n\r\n        return me.templateSrv.replace(`${stringWithVariables}`);\r\n    }\r\n\r\n    /**\r\n     * Internal function to extract value from object based on path\r\n     *\r\n     * @param {Object} object\r\n     * @param {String} path\r\n     * @returns\r\n     * @memberof DeviceHive\r\n     */\r\n    _extractValueByPath(object, path) {\r\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\r\n        let current = object;\r\n\r\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\r\n\r\n        return current;\r\n    }\r\n}\r\n\r\n\r\nexport default GenericDatasource\r\n"]}