{"version":3,"sources":["../src/ConverterManager.js"],"names":["lodash","ConverterManager","me","converters","Map","set","arguments","type","defaultValue","exec","a1","value","convertValueOptions","_getConvertOptions","convertTypeOptions","Object","keys","options","a2","a3","_execConvert","result","forEach","key","push","assign","name","Array","from","converterName","get","getConverterObject","reduce","obj","argument","index","args","has","converter","execFunc","bind","_castArgument","castedValue","Number","isNumber","isNaN","temperature","to","_convertTemperature"],"mappings":"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","file":"ConverterManager.js","sourcesContent":["import lodash from \"lodash\";\r\n\r\nclass ConverterManager {\r\n\r\n    constructor() {\r\n        const me = this;\r\n\r\n        me.converters = new Map();\r\n\r\n        me.converters.set(`offset`, {\r\n            arguments: [\r\n                { type: `number`, defaultValue: 0 }\r\n            ],\r\n            exec: (a1, value) => a1 + value\r\n        });\r\n\r\n        me.converters.set(`scale`, {\r\n            arguments: [\r\n                { type: `number`, defaultValue: 1 }\r\n            ],\r\n            exec: (a1, value) => a1 * value\r\n        });\r\n\r\n        const convertValueOptions = ConverterManager._getConvertOptions();\r\n        const convertTypeOptions = Object.keys(convertValueOptions);\r\n\r\n        me.converters.set(`convert`, {\r\n            arguments: [\r\n                { type: `option`, defaultValue: convertTypeOptions[0], options: convertTypeOptions },\r\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions },\r\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions }\r\n            ],\r\n            exec: (a1, a2, a3, value) => ConverterManager._execConvert(a1, a2, a3, value)\r\n        });\r\n    }\r\n\r\n    getConvertersMap() {\r\n        const me = this;\r\n\r\n        return me.converters;\r\n    }\r\n\r\n    getConvertersList() {\r\n        const me = this;\r\n        const result = [];\r\n\r\n        me.converters.forEach((value, key) => {\r\n            result.push(Object.assign({ name: key }, value));\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    getConvertersNameList() {\r\n        const me = this;\r\n\r\n        return Array.from(me.converters.keys());\r\n    }\r\n\r\n    getConverterObject(converterName) {\r\n        const me = this;\r\n\r\n        return me.converters.get(converterName);\r\n    }\r\n\r\n    getConverterDefaultValuesObject(converterName) {\r\n        const me = this;\r\n\r\n        return me.getConverterObject(converterName).arguments.reduce((obj, argument, index) => {\r\n            obj[index] = argument.defaultValue;\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n\r\n    convert(converterName, value, args) {\r\n        const me = this;\r\n        let result = value;\r\n\r\n        if (me.converters.has(converterName)) {\r\n            const converter = me.converters.get(converterName);\r\n            const exec = converter.arguments.reduce((execFunc, argument, index) =>\r\n                execFunc.bind(null, ConverterManager._castArgument(args[index], argument)), converter.exec);\r\n\r\n            result = exec(result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static _castArgument(value, argument) {\r\n        let result = argument.defaultValue;\r\n\r\n        switch(argument.type) {\r\n            case `number`:\r\n                const castedValue = Number(value);\r\n                result = lodash.isNumber(castedValue) && !lodash.isNaN(castedValue) ? castedValue : result;\r\n                break;\r\n            case `option`:\r\n            case `typedOption`:\r\n                result = value;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static _getConvertOptions () {\r\n        return {\r\n            temperature: [ 'C', 'F', 'K' ]\r\n        }\r\n    }\r\n\r\n    static _execConvert (type, from, to, value) {\r\n        let result = value;\r\n\r\n        switch (type) {\r\n            case 'temperature':\r\n                result = ConverterManager._convertTemperature(from, to, value);\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static _convertTemperature (from, to, value) {\r\n        let result = value;\r\n\r\n        switch (from + to) {\r\n            case 'CF':\r\n                result = (value * 9 / 5) + 32;\r\n                break;\r\n            case 'CK':\r\n                result = value + 273.15;\r\n                break;\r\n            case 'FC':\r\n                result = (value - 32) * 5 / 9;\r\n                break;\r\n            case 'FK':\r\n                result = (value + 459.67) * 5 / 9;\r\n                break;\r\n            case 'KC':\r\n                result = value - 273.15;\r\n                break;\r\n            case 'KF':\r\n                result = (value * 9 / 5) - 459.67;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default ConverterManager;"]}