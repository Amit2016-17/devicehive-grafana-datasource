{"version":3,"sources":["../src/DeviceHiveDatasource.js"],"names":["moment","DeviceHive","ConverterManager","converterManager","DeviceHiveDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","accessToken","refreshToken","options","Promise","all","targets","filter","target","hide","map","send","_generateRequestObject","maxDataPoints","then","data","results","result","index","label","dataPath","_processVariables","refId","datapoints","_convertValue","_extractValueByPath","converters","utc","timestamp","format","catch","error","reject","status","message","title","annotation","config","limit","item","annotationObj","time","authenticate","resolve","value","reduce","v","converter","convert","argValues","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field","allOptions","resultObj","action","deviceId","start","range","from","toDate","getTime","end","to","sortField","sortOrder","take"],"mappings":"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","file":"DeviceHiveDatasource.js","sourcesContent":["import moment from 'moment';\r\nimport DeviceHive from './DeviceHive';\r\nimport ConverterManager from './ConverterManager.js';\r\n\r\nconst converterManager = new ConverterManager();\r\n\r\n\r\n/**\r\n * DeviceHive datasource class\r\n * Datasource object communicates with the database and transforms data to times series.\r\n */\r\nclass DeviceHiveDatasource {\r\n\r\n    /**\r\n     * Creates an instance of DeviceHiveDatasource.\r\n     * @param {Object} instanceSettings\r\n     * @param {any} $q\r\n     * @param backendSrv\r\n     * @param templateSrv\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        const me = this;\r\n\r\n        me.q = $q;\r\n        me.type = instanceSettings.type;\r\n        me.url = instanceSettings.url;\r\n        me.name = instanceSettings.name;\r\n        me.jsonData = instanceSettings.jsonData;\r\n        me.templateSrv = templateSrv;\r\n        me.deviceHive = new DeviceHive({\r\n            serverUrl: me.jsonData.serverURL,\r\n            login: me.jsonData.auth.login,\r\n            password: me.jsonData.auth.password,\r\n            accessToken: me.jsonData.auth.accessToken,\r\n            refreshToken: me.jsonData.auth.refreshToken,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to query data\r\n     * @param {Object} options\r\n     * @returns\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    query(options) {\r\n        const me = this;\r\n\r\n        return Promise.all(options.targets\r\n                .filter(target => target.hide !== true )\r\n                .map(target => me.deviceHive.send(me._generateRequestObject(target, options, options.maxDataPoints))))\r\n            .then(results => {\r\n                return {\r\n                    data: results.map((result, index) => {\r\n                        const type = options.targets[index].type;\r\n                        const label = options.targets[index].label;\r\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\r\n                        const refId = options.targets[index].refId;\r\n\r\n                        return {\r\n                            target: label || `${type}${refId}`,\r\n                            datapoints: result[`${type}s`].map(target => {\r\n                                return [\r\n                                    me._convertValue(me._extractValueByPath(target, dataPath), options.targets[index].converters),\r\n                                    +moment.utc(target.timestamp).format(`x`)\r\n                                ]\r\n                            })\r\n                        };\r\n                    })\r\n                }\r\n            })\r\n            .catch((error) => me.q.reject({ status: `error`, message: error, title: `Error` }));\r\n    }\r\n\r\n    /**\r\n     * Used by dashboards to get annotations\r\n     * @param options\r\n     * @returns {Promise}\r\n     */\r\n    annotationQuery(options) {\r\n        const me = this;\r\n\r\n        return me.deviceHive.send(me._generateRequestObject(\r\n                options.annotation.config, options, options.annotation.limit))\r\n            .then(result => {\r\n                const type = options.annotation.config.type;\r\n                const dataPath = me._processVariables(options.annotation.config.dataPath);\r\n\r\n                return result[`${type}s`].map((item) => {\r\n                    const annotationObj = me._extractValueByPath(item, dataPath);\r\n                    annotationObj.annotation = options.annotation;\r\n                    annotationObj.time = annotationObj.time || +moment.utc(item.timestamp).format(`x`);\r\n\r\n                    return annotationObj;\r\n                });\r\n            })\r\n            .catch((error) => me.q.reject({ status: `error`, message: error, title: `Error` }));\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to test datasource\r\n     * @returns\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    testDatasource() {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.resolve({ status: `success`, message: `Data source is working`, title: `Success` }))\r\n            .catch((error) => me.q.reject({ status: `error`, message: error, title: `Error` }));\r\n    }\r\n\r\n    /**\r\n     * Converting value by ConverterManager\r\n     * @param value\r\n     * @param converters\r\n     * @private\r\n     */\r\n    _convertValue(value, converters) {\r\n        return converters.reduce((v, converter) =>\r\n            converterManager.convert(converter.name, v, converter.argValues), value);\r\n    }\r\n\r\n    /**\r\n     * Transform template variable to it's values\r\n     * @param stringWithVariables\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _processVariables(stringWithVariables) {\r\n        const me = this;\r\n\r\n        return me.templateSrv.replace(`${stringWithVariables}`);\r\n    }\r\n\r\n    /**\r\n     * Internal function to extract value from object based on path\r\n     * @param {Object} object\r\n     * @param {String} path\r\n     * @returns\r\n     * @memberof DeviceHive\r\n     */\r\n    _extractValueByPath(object, path) {\r\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\r\n        let current = object;\r\n\r\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\r\n\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * Generate DeviceHive WS request object\r\n     * @param target\r\n     * @param allOptions\r\n     * @param limit\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _generateRequestObject(target, allOptions, limit) {\r\n        const me = this;\r\n        const resultObj = {\r\n            action: `${target.type}/list`,\r\n            deviceId: me.jsonData.deviceId,\r\n            start: allOptions.range.from.toDate().getTime(),\r\n            end: allOptions.range.to.toDate().getTime(),\r\n            sortField: `timestamp`,\r\n            sortOrder: `ASC`,\r\n            take: limit || 100\r\n        };\r\n\r\n        resultObj[target.type] = me._processVariables(target.name);\r\n\r\n        return resultObj;\r\n    }\r\n}\r\n\r\n\r\nexport default DeviceHiveDatasource\r\n"]}