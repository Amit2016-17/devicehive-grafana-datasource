{"version":3,"sources":["../src/DeviceHiveDatasource.js"],"names":["moment","DeviceHive","ConverterManager","converterManager","DeviceHiveDatasource","instanceSettings","$q","backendSrv","templateSrv","me","q","type","url","name","jsonData","deviceHive","serverUrl","serverURL","login","auth","password","token","options","authenticate","then","Promise","all","targets","filter","target","hide","map","send","_generateRequestObject","maxDataPoints","data","results","result","index","dataPath","_processVariables","refId","datapoints","_convertValue","_extractValueByPath","converters","utc","timestamp","format","annotation","config","limit","item","annotationObj","time","resolve","status","message","title","catch","error","value","reduce","v","converter","convert","argValues","stringWithVariables","replace","object","path","fields","split","elem","current","forEach","field","allOptions","resultObj","action","deviceId","start","range","from","toDate","getTime","end","to","sortField","sortOrder","take"],"mappings":"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","file":"DeviceHiveDatasource.js","sourcesContent":["import moment from 'moment';\r\nimport DeviceHive from './DeviceHive';\r\nimport ConverterManager from './ConverterManager.js';\r\n\r\nconst converterManager = new ConverterManager();\r\n\r\n/**\r\n *\r\n */\r\nclass DeviceHiveDatasource {\r\n\r\n    /**\r\n     * Creates an instance of DeviceHiveDatasource.\r\n     * @param {Object} instanceSettings\r\n     * @param {any} $q\r\n     * @param backendSrv\r\n     * @param templateSrv\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        const me = this;\r\n\r\n        me.q = $q;\r\n        me.type = instanceSettings.type;\r\n        me.url = instanceSettings.url;\r\n        me.name = instanceSettings.name;\r\n        me.jsonData = instanceSettings.jsonData;\r\n        me.templateSrv = templateSrv;\r\n        me.deviceHive = new DeviceHive({\r\n            serverUrl: me.jsonData.serverURL,\r\n            login: me.jsonData.auth.login,\r\n            password: me.jsonData.auth.password,\r\n            token: me.jsonData.auth.token\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to query data\r\n     *\r\n     * @param {Object} options\r\n     * @returns\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    query(options) {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.all(options.targets\r\n                .filter(target => target.hide !== true )\r\n                .map(target => me.deviceHive.send(me._generateRequestObject(target, options, options.maxDataPoints)))\r\n            ))\r\n            .then(results => {\r\n                return {\r\n                    data: results.map((result, index) => {\r\n                        const type = options.targets[index].type;\r\n                        const dataPath = me._processVariables(options.targets[index].dataPath);\r\n                        const refId = options.targets[index].refId;\r\n\r\n                        return {\r\n                            target: `${type}${refId}`,\r\n                            datapoints: result[`${type}s`].map(target => {\r\n                                return [\r\n                                    me._convertValue(me._extractValueByPath(target, dataPath), options.targets[index].converters),\r\n                                    +moment.utc(target.timestamp).format(`x`)\r\n                                ]\r\n                            })\r\n                        };\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     * @returns {Promise}\r\n     */\r\n    annotationQuery(options) {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => me.deviceHive.send(me._generateRequestObject(\r\n                options.annotation.config, options, options.annotation.limit)))\r\n            .then(result => {\r\n                const type = options.annotation.config.type;\r\n                const dataPath = me._processVariables(options.annotation.config.dataPath);\r\n\r\n                return result[`${type}s`].map((item) => {\r\n                    const annotationObj = me._extractValueByPath(item, dataPath);\r\n                    annotationObj.annotation = options.annotation;\r\n                    annotationObj.time = annotationObj.time || +moment.utc(item.timestamp).format(`x`);\r\n\r\n                    return annotationObj;\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Function used by Grafana to test datasource\r\n     *\r\n     * @returns\r\n     * @memberof DeviceHiveDatasource\r\n     */\r\n    testDatasource() {\r\n        const me = this;\r\n\r\n        return me.deviceHive.authenticate()\r\n            .then(() => Promise.resolve({ status: `success`, message: `Data source is working`, title: `Success` }))\r\n            .catch((error) => Promise.resolve({ status: `error`, message: error, title: `Error` }));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param value\r\n     * @param converters\r\n     * @private\r\n     */\r\n    _convertValue(value, converters) {\r\n        return converters.reduce((v, converter) =>\r\n            converterManager.convert(converter.name, v, converter.argValues), value);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stringWithVariables\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _processVariables(stringWithVariables) {\r\n        const me = this;\r\n\r\n        return me.templateSrv.replace(`${stringWithVariables}`);\r\n    }\r\n\r\n    /**\r\n     * Internal function to extract value from object based on path\r\n     *\r\n     * @param {Object} object\r\n     * @param {String} path\r\n     * @returns\r\n     * @memberof DeviceHive\r\n     */\r\n    _extractValueByPath(object, path) {\r\n        const fields = path.split(/[\\.\\[\\]]/).filter(elem => elem !== ``);\r\n        let current = object;\r\n\r\n        fields.forEach(field => current = current && current[field] ? current[field] : null);\r\n\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param target\r\n     * @param allOptions\r\n     * @param limit\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _generateRequestObject(target, allOptions, limit) {\r\n        const me = this;\r\n        const resultObj = {\r\n            action: `${target.type}/list`,\r\n            deviceId: me.jsonData.deviceId,\r\n            start: allOptions.range.from.toDate().getTime(),\r\n            end: allOptions.range.to.toDate().getTime(),\r\n            sortField: `timestamp`,\r\n            sortOrder: `ASC`,\r\n            take: limit || 100\r\n        };\r\n\r\n        resultObj[target.type] = me._processVariables(target.name);\r\n\r\n        return resultObj;\r\n    }\r\n}\r\n\r\n\r\nexport default DeviceHiveDatasource\r\n"]}